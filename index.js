'use strict';var React=require('react');var _require=require('fs'),readdirSync=_require.readdirSync;var _require2=require('path'),resolve=_require2.resolve;var _require3=require(resolve(process.cwd(),'src/helpers.js')),isObject=_require3.isObject,isFunction=_require3.isFunction,isString=_require3.isString,isArray=_require3.isArray,arrayHasValues=_require3.arrayHasValues,resolveComponent=_require3.resolveComponent,renderComponent=_require3.renderComponent,avoidXSS=_require3.avoidXSS;var _require4=require('react-router-config'),renderRoutes=_require4.renderRoutes,matchRoutes=_require4.matchRoutes;module.exports=function(options){if(isObject(options)){// Prepare the middleware:
var middleware=function middleware(req,res,next){function prepareComponent(){if(routes){var props={title:'Untitled'};if(arguments[0]){if(isObject(arguments[0])){props=Object.assign(props,arguments[0])}}var component=matchRoutes(options.routes,req.url)[0].route.component.default;return{component:component,props:props}}else{if(arguments[0]){if(isString(arguments[0])){/* Require the component: */var _component=resolveComponent(resolve(componentsPath,arguments[0]));if(_component){var _props={title:'Untitled'};if(arguments.length===3&&isFunction(arguments[arguments.length-1])){if(arguments[1]){if(isObject(arguments[1])){_props=Object.assign(_props,arguments[1])}}}return{component:_component,props:_props}}else{throw new Error('"react-render-middleware" -> component was not found in the filesystem')}}else{throw new Error('"react-render-middleware" -> component argument must be a string type')}}else{throw new Error('"react-render-middleware" -> component argument must be defined')}}}function prepareContent(url,component,props,template,id){// -------------------------------------------------------- Content:
var content=renderComponent(url,component,props);var $=require('cheerio').load(template);$('title').text(props.title);$('head').append('<script id="__initial_state__">window.__INITIAL_STATE__ = '+avoidXSS(props)+'</script>');$('#'+id).html(content.html);// -------------------------------------------------------- Return:
return{html:$.html(),context:content.context,component:{original:component,rendered:content.html},props:{original:props,stringify:avoidXSS(props)},template:template,changes:{title:$('title').html(),state:$('#__initial_state__').html(),mount:$('#'+id).html()}}}function prepareResults(results,callback){if(isFunction(callback)){return callback(results)}else{return results}}// Description: Add a new function called "render" to the req object:
req.render=function render(){// ---------------------------------------------------------- Component & Props:
var _prepareComponent=prepareComponent.apply(undefined,arguments),component=_prepareComponent.component,props=_prepareComponent.props;// ---------------------------------------------------------- Content:
var results=prepareContent(req.url,component,props,templateHTML,mountId);// ---------------------------------------------------------- Return:
return prepareResults(results,arguments[arguments.length-1])};// Call next:
return next()};// Get variables from options (if they were passed...)
var templateHTML=options.templateHTML,mountId=options.mountId,componentsPath=options.componentsPath,routes=false;// Check if routes option is valid:
if('routes'in options){if(!isArray(options.routes)){throw new Error('"react-render-middleware" -> "routes" property must be an array.')}if(arrayHasValues(options.routes)){routes=true}}// This option is used independently if routes were found or not.
if(!templateHTML){throw'"react-render-middleware" -> "templateHTML" property must be defined'}else{if(!isString(templateHTML)){throw'"react-render-middleware" -> "templateHTML" must be a string path type'}}// This option is used independently if routes were found or not.
if(!mountId){throw'"react-render-middleware" -> "mountId" property must be defined'}else{if(!isString(mountId)){throw'"react-render-middleware" -> "mountId" must be a string path type'}else{if(!templateHTML.includes('id="'+mountId+'"')){throw'"react-render-middleware" -> "mountId" was not found in the template'}}}// Check if componentsPath option is valid (only if routes were not found):
if(!routes){// Prepare component in case routes weren't provided in options.
if(!componentsPath){throw'"react-render-middleware" -> "componentsPath" property must be defined'}else{if(!isString(componentsPath)){throw'"react-render-middleware" -> "componentsPath" must be a string path type'}else{try{readdirSync(componentsPath,{encoding:'UTF-8'})}catch(err){throw'\n"react-render-middleware" -> \nReason: Directory doesn\'t exists in the filesystem.\ncomponentsPath: "'+componentsPath+'"\nCode: "'+err.code+'"\n'}}}};// Return the middleware:
return middleware}else{throw'"react-render-middleware" -> Options object was not passed to the middleware.'}};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,